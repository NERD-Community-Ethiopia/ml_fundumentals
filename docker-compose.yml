version: '3.8'

services:
  # Main ML Application
  ml-app:
    build: .
    container_name: ml-multi-model-app
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./mlruns:/app/mlruns
    environment:
      - PYTHONPATH=/app
      - MLFLOW_TRACKING_URI=postgresql://mlops_user:mlops_password@postgres:5432/mlops
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    command: python -m uvicorn src.models.multi_model_serving:app --host 0.0.0.0 --port 8000
    restart: unless-stopped
    networks:
      - ml-network
    depends_on:
      - mlflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MLflow Experiment Tracking UI
  mlflow:
    build: .
    container_name: mlflow-ui
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/app/mlruns
      - ./logs:/app/logs
    environment:
      - MLFLOW_TRACKING_URI=postgresql://mlops_user:mlops_password@postgres:5432/mlops
      - MLFLOW_TRACKING_USERNAME=admin
      - MLFLOW_TRACKING_PASSWORD=admin123
    command: mlflow ui --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://mlops_user:mlops_password@postgres:5432/mlops
    restart: unless-stopped
    networks:
      - ml-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database for Production
  postgres:
    image: postgres:13-alpine
    container_name: ml-postgres
    environment:
      POSTGRES_DB: mlops
      POSTGRES_USER: mlops_user
      POSTGRES_PASSWORD: mlops_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ml-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlops_user -d mlops"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Session Management
  redis:
    image: redis:6-alpine
    container_name: ml-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ml-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: ml-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - ml-app
      - mlflow
    restart: unless-stopped
    networks:
      - ml-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ml-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ml-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ml-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - ml-network
    depends_on:
      - prometheus

networks:
  ml-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 